{
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(npx tsc:*)",
      "Bash(find:*)",
      "Bash(npm run build:backend:*)",
      "Bash(npm run build:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm test:*)",
      "Bash(npm run test:cov:*)",
      "Bash(npm run backend:*)",
      "Bash(pkill:*)",
      "Bash(timeout 5 npm run backend)",
      "Bash(npm run:*)",
      "Bash(npm -w backend run lint)",
      "Bash(timeout 10s npm run backend)",
      "Bash(timeout 15s npm run start:dev)",
      "WebFetch(domain:developers.chrome.com)",
      "WebFetch(domain:developer.chrome.com)",
      "mcp__chrome-devtools__new_page",
      "mcp__chrome-devtools__performance_start_trace",
      "mcp__chrome-devtools__list_pages",
      "mcp__chrome-devtools__performance_stop_trace",
      "mcp__chrome-devtools__list_network_requests",
      "mcp__chrome-devtools__get_network_request",
      "mcp__chrome-devtools__navigate_page",
      "WebFetch(domain:api.put.io)",
      "WebFetch(domain:app.swaggerhub.com)",
      "WebSearch",
      "Bash(npm ls:*)",
      "WebFetch(domain:git.frostfs.info)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/modules/info/services/api.service.spec.ts --coverage)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/modules/info/services/api.service.spec.ts --verbose)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/modules/downloader/implementation/download-coordinator.spec.ts --verbose)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/modules/info/services/api.service.spec.ts)",
      "Bash(npm -w backend run test:cov -- --testPathPattern=src/app/helpers --silent)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/helpers/file.helper.spec.ts -t \"should fail intentionally\")",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/helpers/test-failure-demo.spec.ts)",
      "Bash(CI=true npm run codegen)",
      "Bash(npm -w client run build)",
      "Bash(npm -w backend run generate-schema)",
      "Read(//Users/pt/.Trash/**)",
      "WebFetch(domain:docs.nestjs.com)",
      "Bash(npm -w backend run build)",
      "Bash(npm -w client run lint)",
      "Bash(npx eslint:*)",
      "Bash(cat:*)",
      "Read(//Users/pt/work/**)",
      "Bash(git checkout:*)",
      "Bash(npm -w client run lint -- --debug)",
      "Bash(npx ts-node:*)",
      "Bash(timeout 10s npx ts-node src/generate-schema.ts)",
      "Bash(git check-ignore:*)",
      "Bash(docker build:*)",
      "Bash(docker-compose build:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose:*)",
      "Bash(npm -w backend run test -- --testPathPattern=download-manager.resolver.spec.ts)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/modules/download-manager/resolvers/download-manager.resolver.spec.ts --verbose)",
      "Bash(npm -w backend run test)",
      "Bash(npm -w backend run test -- --testPathPattern=src/app/modules/download-manager/services/download-manager.service.spec.ts --verbose)",
      "Bash(npm -w backend run test -- --detectOpenHandles --forceExit)",
      "Bash(node:*)",
      "Bash(npm -w backend run test -- --testPathPattern=download-coordinator.spec.ts)",
      "Bash(npm -w backend run test -- --testPathPattern=\"download-manager|downloader|repository\" --coverage=false)"
    ],
    "deny": [],
    "ask": []
  }
}